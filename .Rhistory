df1 <- aggregate(death~countryName, subset(df, region =="Europe"), sum)
View(df1)
View(df)
libray(dplyr)
library(dplyr)
df2 <- df %>% group_by(countryName) %>% summarise(yesterdayDeaths = sum(if(day == Sys.Date()-1, death)))
df2 <- df %>% group_by(countryName) %>% summarise(yesterdayDeaths = sum(ifelse(day == Sys.Date()-1, death, 0)))
View(df2)
df2 <- df %>% group_by(countryName) %>% summarise(yesterdayDeaths = sum(ifelse(day == Sys.Date()-1, death, 0))) %>% ungroup()
View(df2)
df3 <- df
df3 <- group_by(df3, countryName)
View(df3)
df3 <- summarise(df3, yesterdayDeaths = sum(ifelse(day == Sys.Date()-1, death, 0)))
df3 <- ungroup(df3)
View(df3)
## read the source data
df <- read.csv ('https://raw.githubusercontent.com/ulklc/covid19-timeseries/master/countryReport/raw/rawReport.csv')
## copy df to df1 for preservation of original data
df1 <- df
## group the data by country for manipulation
df1 <- group_by(df1, countryName)
## create a variable yesterdayDeaths that adds the death column if the corresponding day entry equals yesterday
df1 <- summarise(df1, yesterdayDeaths = sum(ifelse(day == Sys.Date()-1, death, 0)))
## ungroup the data to avoid data manipulation errors
df1 <- ungroup(df1)
View(df1)
View(df)
View(df1)
df <- read.csv ('https://raw.githubusercontent.com/ulklc/covid19-timeseries/master/countryReport/raw/rawReport.csv')
df1 <- aggregate(death~countryName, subset(df, region =="Europe"), sum)
df <- read.csv ('https://raw.githubusercontent.com/ulklc/covid19-timeseries/master/countryReport/raw/rawReport.csv',
stringsAsFactors = FALSE)
max.date <- df[which.max(as.Date(df$day)),"day"]
df1 <- df %>% group_by(countryName) %>% summarise(totalDeaths = sum(deaths), totalRecovered = sum(recovered)) %>% ungroup()
df1 <- df %>% group_by(countryName) %>% summarise(totalDeaths = sum(death), totalRecovered = sum(recovered)) %>% ungroup()
df1 <-
df1
df2$date
df2 <- data.frame()
df2<- c(df1[which.max(df1$totalDeaths),], df1[which.max(df1$totalRecovered),],)
df1 <- df
df1 <- group_by(df1, countryName)
df1 <- summarise(df1, totalDeaths = sum(death), totalRecovered = sum(recovered))
View(df1)
df1 <- ungroup(df1)
max.deaths <- df1[which.max(df1$totalDeaths),]
View(max.deaths)
df <- read.csv ('https://raw.githubusercontent.com/ulklc/covid19-timeseries/master/countryReport/raw/rawReport.csv', stringsAsFactors = FALSE)
max.date <- df[which.max(as.Date(df$day)),"day"]
df1 <- df
df1 <- group_by(df1, countryName)
df1 <- summarise(df1, totalDeaths = sum(death), totalRecovered = sum(recovered))
df1 <- ungroup(df1)
max.deaths <- df1[which.max(df1$totalDeaths),]
max.deaths$totalDeaths <- paste0(max.deaths$totalDeaths,"*")
max.recovered <- df1[which.max(df1$totalRecovered),]
max.recovered$totalRecovered <- paste0(max.recovered$totalRecovered,"*")
max.records <- rbind(max.deaths, max.recovered)
max.records$date <- max.date
df <- read.csv ('https://raw.githubusercontent.com/ulklc/covid19-timeseries/master/countryReport/raw/rawReport.csv', stringsAsFactors = FALSE)
max.date <- df[which.max(as.Date(df$day)),"day"]
df1 <- df
df1 <- dplyr::group_by(df1, countryName)
df1 <- summarise(df1, totalDeaths = sum(death), totalRecovered = sum(recovered))
df1 <- ungroup(df1)
max.deaths <- df1[which.max(df1$totalDeaths),]
max.deaths$totalDeaths <- paste0(max.deaths$totalDeaths,"*")
max.recovered <- df1[which.max(df1$totalRecovered),]
max.recovered$totalRecovered <- paste0(max.recovered$totalRecovered,"*")
max.records <- rbind(max.deaths, max.recovered)
max.records$date <- max.date
library(dplyr)
df <- read.csv ('https://raw.githubusercontent.com/ulklc/covid19-timeseries/master/countryReport/raw/rawReport.csv', stringsAsFactors = FALSE)
max.date <- df[which.max(as.Date(df$day)),"day"]
df1 <- df
df1 <- dplyr::group_by(df1, countryName)
df1 <- summarise(df1, totalDeaths = sum(death), totalRecovered = sum(recovered))
df1 <- ungroup(df1)
max.deaths <- df1[which.max(df1$totalDeaths),]
max.deaths$totalDeaths <- paste0(max.deaths$totalDeaths,"*")
max.recovered <- df1[which.max(df1$totalRecovered),]
max.recovered$totalRecovered <- paste0(max.recovered$totalRecovered,"*")
max.records <- rbind(max.deaths, max.recovered)
max.records$date <- max.date
View(max.records)
library(dplyr)
df <- read.csv ('https://raw.githubusercontent.com/ulklc/covid19-timeseries/master/countryReport/raw/rawReport.csv', stringsAsFactors = FALSE)
max.date <- df[which.max(as.Date(df$day)),"day"]
df1 <- df
df1 <- filter(df1, as.Date(date) == as.Date(max.date))
max.deaths <- df1[which.max(df1$death),]
max.deaths$death <- paste0(max.deaths$death,"*")
max.recovered <- df1[which.max(df1$recovered),]
max.recovered$recovered <- paste0(max.recovered$recovered,"*")
max.records <- rbind(max.deaths, max.recovered)
max.records$date <- max.date
View(max.records)
max.records <- select(max.records, c("day","countryName","death","recovered"))
View(max.records)
df <- read.csv ('https://raw.githubusercontent.com/ulklc/covid19-timeseries/master/countryReport/raw/rawReport.csv', stringsAsFactors = FALSE)
max.date <- df[which.max(as.Date(df$day)),"day"]
df1 <- df
df1 <- filter(df1, as.Date(date) == as.Date(max.date))
max.deaths <- df1[which.max(df1$death),]
max.deaths$death <- paste0("**",max.deaths$death,"**")
max.recovered <- df1[which.max(df1$recovered),]
max.recovered$recovered <- paste0("**",max.recovered$recovered,"**")
max.records <- rbind(max.deaths, max.recovered)
max.records$date <- max.date
max.records <- select(max.records, c("day","countryName","death","recovered"))
df1 <- filter(df1, as.Date(df1$date) == as.Date(max.date))
View(df1)
max.date <- df[which.max(as.Date(df$day)),"day"]
df1 <- df
df1 <- filter(df1, as.Date(date, "%Y/%m/%d") == as.Date(max.date))
max.deaths <- df1[which.max(df1$death),]
max.deaths$death <- paste0("**",max.deaths$death,"**")
max.recovered <- df1[which.max(df1$recovered),]
max.recovered$recovered <- paste0("**",max.recovered$recovered,"**")
max.records <- rbind(max.deaths, max.recovered)
max.records$date <- max.date
max.records <- select(max.records, c("day","countryName","death","recovered"))
library(dplyr)
df <- read.csv ('https://raw.githubusercontent.com/ulklc/covid19-timeseries/master/countryReport/raw/rawReport.csv', stringsAsFactors = FALSE)
max.date <- df[which.max(as.Date(df$day)),"day"]
df1 <- df
df1 <- filter(df1, as.Date(date, "%Y/%m/%d") == as.Date(max.date))
max.deaths <- df1[which.max(df1$death),]
max.deaths$death <- paste0("**",max.deaths$death,"**")
max.recovered <- df1[which.max(df1$recovered),]
max.recovered$recovered <- paste0("**",max.recovered$recovered,"**")
max.records <- rbind(max.deaths, max.recovered)
max.records$date <- max.date
max.records <- select(max.records, c("day","countryName","death","recovered"))
df <- read.csv ('https://raw.githubusercontent.com/ulklc/covid19-timeseries/master/countryReport/raw/rawReport.csv', stringsAsFactors = FALSE)
set.date <- "2020-06-01"
df1 <- df
df1 <- filter(df1, as.Date(date, "%Y/%m/%d") == as.Date(set.date))
max.deaths <- df1[which.max(df1$death),]
max.deaths$death <- paste0("**",max.deaths$death,"**")
max.recovered <- df1[which.max(df1$recovered),]
max.recovered$recovered <- paste0("**",max.recovered$recovered,"**")
max.records <- rbind(max.deaths, max.recovered)
max.records$date <- set.date
max.records <- select(max.records, c("day","countryName","death","recovered"))
df <- read.csv ('https://raw.githubusercontent.com/ulklc/covid19-timeseries/master/countryReport/raw/rawReport.csv', stringsAsFactors = FALSE)
set.date <- "2020-06-01"
df1 <- df
df1 <- filter(df1, as.Date(date, "%Y/%m/%d") == as.Date(set.date))
max.deaths <- df1[which.max(df1$death),]
max.deaths$death <- paste0("**",max.deaths$death,"**")
max.recovered <- df1[which.max(df1$recovered),]
max.recovered$recovered <- paste0("**",max.recovered$recovered,"**")
records <- rbind(max.deaths, max.recovered)
View(records)
set.date <- "2020-06-01"
df1 <- df
df1 <- filter(df1, as.Date(date, "%Y/%m/%d") == as.Date(set.date))
max.confirmed <- df1[which.max(df1$confirmed),]
max.confirmed$confirmed <- paste0("**",max.confirmed$confirmed,"**")
max.deaths <- df1[which.max(df1$death),]
max.deaths$death <- paste0("**",max.deaths$death,"**")
max.recovered <- df1[which.max(df1$recovered),]
max.recovered$recovered <- paste0("**",max.recovered$recovered,"**")
records <- rbind(max.confirmed, max.deaths, max.recovered)
View(records)
m1 = c(0, 2, 4)
m2 = c(1, 4)
m3 = (3)
sym(paste0("m1"))
!!"m1"
!!sym("m1")
da <- data.frame(test=1:100)
View(da)
split_row <- round(nrow(da) * 0.8)
data <- as.matrix(da)
data
data[1]
typeof(data)
nrow(data)
library(dplyr)
df <- read.csv ('https://raw.githubusercontent.com/ulklc/covid19-timeseries/master/countryReport/raw/rawReport.csv', stringsAsFactors = FALSE)
reshaped <- function(df){
df %>%
select(region, countryName) %>%
group_by(region, countryName) %>%
count() %>%
ungroup() %>%
spread(countryName, n, drop=TRUE)}
df1 <-reshaped(df)
library(tidyr)
reshaped <- function(df){
df %>%
select(region, countryName) %>%
group_by(region, countryName) %>%
count() %>%
ungroup() %>%
spread(countryName, n, drop=TRUE)}
df1 <-reshaped(df)
View(df1)
install.packages("multidplyr")
Treatment <- c("Hypothermia", "CNS-1102", "Hypocapnia", "Dextrorphan", "Mannitol", "Caffeinol")
Mechanism <- c("Other", "Excitotoxicity", "Blood flow", "Excitotoxicity", "Fluid regulation", "Other")
df <- data.frame(Treatment, Mechanism)
df$Mechanism_extra <- ifelse(df$Treatment == "Hypothermia", "Hypothermia", df$Mechanism)
df$Mechanism_extra
library(officer)
# ..Binary Logistic Regression :
install.packages("caTools")
library(caTools)
require(caTools)
sample = sample.split(diabetes$Outcome, SplitRatio=0.80)
train = subset(diabetes, sample==TRUE)
test = subset(diabetes, sample==FALSE)
nrow(diabetes) ##calculationg the total number of rows
nrow(train) ## total number of Train data rows >> 0.80 * 768
nrow(test) ## total number of Test data rows   >> 0.20 * 768
str(train) ## Structure of train set
Logis_mod<- glm(Outcome~Pregnancies+Glucose+BloodPressure+SkinThickness+
Insulin+BMI+DiabetesPedigreeFunction+Age,family = binomial,data = train)
summary(Logis_mod)
#AIC .. Akaike information criteria ...
#A good model is the one that has minimum AIC among all the other models.
# Testing the Model
glm_probs <- predict(Logis_mod, newdata = test, type = "response")
summary(glm_probs)
glm_pred <- ifelse(glm_probs > 0.5, 1, 0)
summary(glm_pred)
#Avarge prediction for each of the Two outcomes ..
tapply(glm_pred,train$Outcome,mean)
# Confusion Matrix for logistic regression
install.packages("e1071")
library(e1071)
prdval <-predict(Logis_mod,type = "response")
prdbln <-ifelse(prdval > 0.5, 1, 0)
cnfmat <-table(prd=prdbln,act =train$Outcome)
data<-data.fram(f=c("a","a","b","b"),r=c("r","r","r","n"))
data<-data.frame(f=c("a","a","b","b"),r=c("r","r","r","n"))
data1<-filter(data, f=="a")
data
data1<-filter(data, data$f=="a")
data1
data
data1<-filter(data,data$f=="a")
data1
typeof(data)
data<-as.data.frame(data)
typeof(data)
Fruits<-c("Apple","Apple","Apple","Banana","Banana","Orange")
Ripeness<-c("yes","no","yes","yes","yes","no")
Mean<-c(5,6,2,1,6,8)
data<-data.frame(Fruits,Ripeness,Mean)
fruit<-unique(data$Fruits)
for(i in 1:length(fruit)){
df<-filter(data, Fruits==fruit[i])
fruit[i]
ripe<-unique(df$Ripeness)
if(length(ripe)<2){
next
}
t.test(Mean ~ Fruits, data = df)$p.value
}
detach("package:stats", unload = TRUE)
df<-Filter(data,Fruits=fruit[1])
data
df<-Filter(data,Fruits==fruit[1])
df<-filter(data,Fruits==fruit[1])
library(dplyr)
Fruits<-c("Apple","Apple","Apple","Banana","Banana","Orange")
Ripeness<-c("yes","no","yes","yes","yes","no")
Mean<-c(5,6,2,1,6,8)
data<-data.frame(Fruits,Ripeness,Mean)
fruit<-unique(data$Fruits)
for(i in 1:length(fruit)){
df<-filter(data, Fruits==fruit[i])
fruit[i]
ripe<-unique(df$Ripeness)
if(length(ripe)<2){
next
}
t.test(Mean ~ Fruits, data = df)$p.value
}
for(i in 1:length(fruit)){
df<-filter(data, Fruits==fruit[i])
fruit[i]
ripe<-unique(df$Ripeness)
if(length(ripe)<2){
next
}
t.test(Mean ~ Ripeness, data = df)$p.value
}
print(fruit[1])
for(i in 1:length(fruit)){
df<-filter(data, Fruits==fruit[i])
fruit[i]
ripe<-unique(df$Ripeness)
if(length(ripe)<2){
print("only one ripeness")
next
}
t.test(Mean ~ Ripeness, data = df)$p.value
}
Fruits<-c("Apple","Apple","Apple","Banana","Banana","Orange")
Ripeness<-c("yes","no","yes","yes","yes","no")
Mean<-c(5,6,2,1,6,8)
data<-data.frame(Fruits,Ripeness,Mean)
fruit<-unique(data$Fruits)
for(i in 1:length(fruit)){
df<-filter(data, Fruits==fruit[i])
fruit[i]
ripe<-unique(df$Ripeness)
if(length(ripe)<2){
print("only one ripeness")
next
}
out <- tryCatch(
{
t.test(Mean ~ Ripeness, data = df)$p.value
},
error=function(cond) {
message("not enough observations")
return(NA)
}
)
return(out)
}
Fruits<-c("Apple","Apple","Apple","Banana","Banana","Orange")
Ripeness<-c("yes","no","yes","yes","yes","no")
Mean<-c(5,6,2,1,6,8)
data<-data.frame(Fruits,Ripeness,Mean)
fruit<-unique(data$Fruits)
for(i in 1:length(fruit)){
df<-filter(data, Fruits==fruit[i])
message(fruit[i])
ripe<-unique(df$Ripeness)
if(length(ripe)<2){
message("only one ripeness")
next
}
out <- tryCatch(
{
t.test(Mean ~ Ripeness, data = df)$p.value
},
error=function(cond) {
message("not enough observations")
return(NA)
}
)
return(out)
}
length(Fruits)
length(fruit)
Fruits<-c("Apple","Apple","Apple","Banana","Banana","Orange")
Ripeness<-c("yes","no","yes","yes","yes","no")
Mean<-c(5,6,2,1,6,8)
data<-data.frame(Fruits,Ripeness,Mean)
fruit<-unique(data$Fruits)
for(i in 1:length(fruit)){
df<-filter(data, Fruits==fruit[i])
message(fruit[i])
ripe<-unique(df$Ripeness)
if(length(ripe)<2){
message("only one ripeness")
next
}
tryCatch(
{
t.test(Mean ~ Ripeness, data = df)$p.value
},
error=function(cond) {
message("not enough observations")
}
)
}
Fruits<-c("Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple")
Ripeness<-c("yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no")
Mean<-c(5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8)
data<-data.frame(Fruits,Ripeness,Mean)
fruit<-unique(data$Fruits)
for(i in 1:length(fruit)){
df<-filter(data, Fruits==fruit[i])
message(fruit[i])
ripe<-unique(df$Ripeness)
if(length(ripe)<2){
message("only one ripeness")
next
}
tryCatch(
{
message(t.test(Mean ~ Ripeness, data = df)$p.value)
},
error=function(cond) {
message("not enough observations")
}
)
}
Fruits<-c("Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple")
Ripeness<-c("yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no")
Mean<-c(5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8)
data<-data.frame(Fruits,Ripeness,Mean)
fruit<-unique(data$Fruits)
for(i in 1:length(fruit)){
df<-filter(data, Fruits==fruit[i])
message(fruit[i])
ripe<-unique(df$Ripeness)
if(length(ripe)<2){
message("only one ripeness")
next
}
message(t.test(Mean ~ Ripeness, data = df)$p.value)
)
}
Fruits<-c("Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple")
Ripeness<-c("yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no")
Mean<-c(5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8)
data<-data.frame(Fruits,Ripeness,Mean)
fruit<-unique(data$Fruits)
for(i in 1:length(fruit)){
df<-filter(data, Fruits==fruit[i])
message(fruit[i])
ripe<-unique(df$Ripeness)
if(length(ripe)<2){
message("only one ripeness")
next
}
message(t.test(Mean ~ Ripeness, data = df)$p.value)
}
Fruits<-c("Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple","Apple")
Ripeness<-c("yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no")
Mean<-c(5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8)
data<-data.frame(Fruits,Ripeness,Mean)
fruit<-unique(data$Fruits)
for(i in 1:length(fruit)){
df<-filter(data, Fruits==fruit[i])
message(fruit[i])
ripe<-unique(df$Ripeness)
if(length(ripe)<2){
message("only one ripeness")
next
}
tryCatch(
{
message(t.test(Mean ~ Ripeness, data = df)$p.value)
},
error=function(cond) {
message("not enough observations")
}
)
}
Ripeness<-c("yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no")
Mean<-c(5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8)
data<-data.frame(Ripeness,Mean)
data$Fruits<-"Apple"
fruit<-unique(data$Fruits)
for(i in 1:length(fruit)){
df<-filter(data, Fruits==fruit[i])
message(fruit[i])
ripe<-unique(df$Ripeness)
if(length(ripe)<2){
message("only one ripeness")
next
}
tryCatch(
{
message(t.test(Mean ~ Ripeness, data = df)$p.value)
},
error=function(cond) {
message("not enough observations")
}
)
}
Ripeness<-c("yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no","yes","no")
Mean<-c(5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8,5,6,2,1,6,8)
data<-data.frame(Ripeness,Mean)
data$Fruits<-"Apple"
fruit<-unique(data$Fruits)
for(i in 1:length(fruit)){
df<-filter(data, Fruits==fruit[i])
message(fruit[i])
ripe<-unique(df$Ripeness)
if(length(ripe)<2){
message("only one ripeness")
next
}
tryCatch(
{
t.test(Mean ~ Ripeness, data = df)$p.value
},
error=function(cond) {
message("not enough observations")
}
)
}
install.packages("officer")
library(officer)
ppt1<-read_pptx("C:\\test\\test.pptx")
ppt2<-read_pptx()
install.packages("htmltools")
install.packages("htmltools")
shiny::runApp('FL-voter-map')
runApp('FL-voter-map')
shiny::runApp('FL-voter-map/appdir')
runApp('FL-voter-map/appdir')
runApp('FL-voter-map/appdir')
runApp('FL-voter-map/appdir')
runApp('FL-voter-map/appdir')
runApp('FL-voter-map/appdir')
runApp('FL-voter-map/appdir')
shiny::runApp('FL-voter-map')
runApp('FL-voter-map')
shiny::runApp()
